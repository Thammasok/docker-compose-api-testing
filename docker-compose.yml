version: '3.8'
services:
  db:
    image: postgres:latest
    container_name: db
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: pgpwd
      POSTGRES_DB: app
    volumes:
      - ./initial-db:/docker-entrypoint-initdb.d/
    healthcheck: # check initial finish by number of table number is 55
      test:
        [
          'CMD-SHELL',
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 10s
      timeout: 10s
      retries: 60
    networks:
      - test-network

  db-migration:
    image: db-migration:latest
    container_name: db-migration
    build:
      context: ./migration
      dockerfile: ./Dockerfile
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    environment:
      COMMAND: 'updatetestingrollback'
      # COMMAND: "${COMMAND:-rollbackcount 1}"
      DATABASE_URL: host.docker.internal:5432/app
      USERNAME: pguser
      PASSWORD: pgpwd
      SCHEMA_NAME: public
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy

  # Mocking APIs of 3rd Party
  mock-api:
    image: mock-api:latest
    container_name: mock-api
    build:
      context: ./mountebank
      dockerfile: ./Dockerfile
    volumes:
    - ./mountebank/imposters:/imposters
    ports:
    - 2525:2525
    - 8090:8090
    - 8091:8091
    command: --configfile /imposters/imposters.ejs --allowInjection

  # Start Service
  # api:
  #   container_name: api
  #   build:
  #     context: ../
  #     dockerfile: Dockerfile
  #   ports:
  #     - 3001:3001
  #   networks:
  #     - test-network
  #   env_file:
  #     - ../.env
  #   extra_hosts:
  #     - 'host.docker.internal:host-gateway'
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://host.docker.internal:3001/app/health"]
  #     interval: 30s
  #     retries: 10
  #     start_period: 20s
  #     timeout: 10s
  #   depends_on:
  #     db-migration:
  #       condition: service_completed_successfully

  # Start APIs Testing
  api-test:
    image: api-test:latest
    container_name: api-test
    build:
      context: ./postman
      dockerfile: ./Dockerfile
    volumes:
      - ./postman:/etc/newman
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    environment:
      HOST: 'http://host.docker.internal:5000'
    # depends_on:
    #   api:
    #     condition: service_healthy

networks:
  test-network:
